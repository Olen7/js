// –¶–µ–π —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä—é—î –ø—Ä–æ—Å—Ç–∏–π —Å–µ—Ä–≤–µ—Ä –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Express, 
// —è–∫–∏–π –æ–±—Ä–æ–±–ª—è—î –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –≤—Ö–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.

const express = require('express');
const bcrypt = require('bcrypt');
const userModel = require('./models/userModel');
const path = require('path');
const app = express();
const db = require('./db/database'); // –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ–∞–π–ª—É –∞–±–æ –ø–µ—Ä–µ–¥ —Ü–∏–º –º–∞—Ä—à—Ä—É—Ç–æ–º
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());
// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
app.post('/register', (req, res) => {
  const { name, email, password } = req.body;
  bcrypt.hash(password, 10, (err, hashedPassword) => {
    if (err) {
      res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ö–µ—à—É–≤–∞–Ω–Ω—ñ –ø–∞—Ä–æ–ª—è' });
    } else {
      userModel.addUser(name, email, hashedPassword, (err, userId) => {
        if (err) {
          res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' });
        } else {
          res.status(201).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π', userId });
        }
      });
    }
  });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Ö–æ–¥—É
app.post('/login', (req, res) => {
  const { email, password } = req.body;
  const sql = 'SELECT * FROM users WHERE email = ?';
  const db = require('./db/database');

  db.get(sql, [email], (err, user) => {
    if (err) {
      return res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' });
    }
    if (!user) {
      return res.status(404).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    bcrypt.compare(password, user.password, (err, result) => {
      if (err) {
        return res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–∞—Ä–æ–ª—è' });
      }
      if (result) {
        // üëá –¢—É—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ name, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î email
        return res.status(200).json({ message: '–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π', name: user.name });
      } else {
        return res.status(401).json({ error: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å' });
      }
    });
  });
});

app.get('/users', (req, res) => {
  userModel.getAllUsers((err, users) => {
    if (err) {
      res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤' });
    } else {
      res.json(users);
    }
  });
});


app.delete('/users/:id', (req, res) => {
  const userId = req.params.id;
  console.log('‚ñ∂ –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ID:', userId);

  db.run('DELETE FROM users WHERE id = ?', [userId], function(err) {
    if (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ SQLite:', err.message);
      return res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' });
    }

    if (this.changes === 0) {
      return res.status(404).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.status(200).json({ message: '‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ' });
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`);
});